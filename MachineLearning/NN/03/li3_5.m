 clear all;
%设置输入向量每个元素的值域(最小值和最大值),因为有15个输入，
% 所以为15*2矩阵向量
pr=[0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1];
% 训练感知器神经网络
% 定义15*10的训练样本集输入向量
p=[1 1 1 1 0 1 1 0 1 1 0 1 1 1 1;1 1 0 0 1 0 0 1 1 0 1 0 1 1 1;...
   1 1 1 1 0 1 0 1 1 1 1 0 1 1 1;1 1 1 1 1 1 0 1 1 0 0 1 1 1 1;...
   0 1 0 1 1 0 1 1 0 1 1 1 0 1 0;1 1 1 1 1 0 0 1 1 0 0 1 1 1 1;...
   0 1 1 1 1 0 1 1 1 1 0 1 1 1 1;1 1 1 1 0 1 0 1 0 0 1 0 0 1 0;...
   1 1 1 1 0 1 1 1 1 1 0 1 1 1 1;1 1 1 1 0 1 1 1 1 0 1 1 1 1 0]';
net=newp(pr,2);    %创建感知器神经网络,有15个输入元素,2个神经元
t=[1 0 1 0 1 0 1 0 1 0;0 1 0 1 0 1 0 1 0 1];  %定义2*10的目标向量
[net,tr]=train(net,p,t); %训练单层感知器神经网络
disp('输出训练后的权值：')
iw1=net.IW{1}            %输出训练后的权值
disp('输出训练后的阈值：')
b1=net.b{1}              %输出训练后的阈值
disp('输出训练过程经过的每一步长：')
epoch1=tr.epoch          %输出训练过程经过的每一步长
disp('输出每一步训练结果的误差：')
perf1=tr.perf            %输出每一步训练结果的误差
%存储训练后的神经网络
save netli35 net

clear all;   %清除所有内存变量
load netli35 net  %加载训练后的神经网络
% 对训练后的神经网络进行仿真
ptest=[1 1 1 1 0 1 1 0 1 1 0 1 1 0 1;...  %数字0,与训练样本不一致
       1 1 0 0 1 0 0 1 1 0 1 0 1 1 1;...  %数字1,与训练样本一致
       1 1 1 0 1 1 0 1 0 1 1 1 0 0 0;...  %非数字
       1 1 1 1 1 0 1 0 1 0 0 0 1 1 1]';   %非数字
a=sim(net,ptest)  %输出仿真结果
